import {
  onMount
} from "./chunk-T45KAR32.js";
import {
  append_styles,
  attr_effect,
  bind_this,
  child,
  close,
  init,
  open,
  prop,
  sibling,
  slot,
  stringify,
  template
} from "./chunk-FDSTL32R.js";
import "./chunk-JUYQ7LBB.js";
import "./chunk-QKOF6TZO.js";
import {
  deep_read_state,
  get,
  mark_module_end,
  mark_module_start,
  mutable_source,
  pop,
  pre_effect,
  push,
  set,
  untrack
} from "./chunk-DVZZ2LBH.js";
import "./chunk-IP2U24VQ.js";
import "./chunk-LQRLXBZM.js";
import "./chunk-6WDZWUHI.js";

// node_modules/svelte-scrolly/Scrolly.svelte
mark_module_start(Scrolly);
var frag = template(`<section class="scrolly svelte-14jsymd"><section class="story svelte-14jsymd"><!></section> <section class="viz svelte-14jsymd"><!></section></section>`);
function Scrolly($$anchor, $$props) {
  var _a;
  if (new.target === Scrolly)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, Scrolly);
  let progress = prop($$props, "progress", 4, 0);
  let progressRaw = prop($$props, "progressRaw", 4, 0);
  let threshold = prop($$props, "threshold", 0, 0.5);
  let margin = prop($$props, "margin", 0, 30);
  let debounce = prop($$props, "debounce", 0, false);
  let throttle = prop($$props, "throttle", 0, false);
  let container = mutable_source(), vizContainer = mutable_source();
  let minTop, maxTop;
  let pageTop;
  let rect = {};
  let intersectionObserver, resizeObserver;
  let intersectionRatio = 0;
  const clamp = (min, value, max) => Math.min(Math.max(min, value), max);
  const getProgress = (value, min, max) => 100 * (value - min) / (max - min);
  const runImmediately = (fn) => fn();
  const identity = (fn) => fn;
  let throttled = mutable_source();
  let debounced = mutable_source();
  onMount(() => {
    function calculateProgress({
      top = get(container).getBoundingClientRect().top
    } = {}) {
      progressRaw(getProgress(top, minTop, maxTop));
      updateProgress();
    }
    function updateProgress() {
      let clampedProgress = clamp(0, progressRaw(), 100);
      if (clampedProgress === 0 || clampedProgress === 100) {
        progress(clampedProgress);
      } else {
        get(debounced)(get(throttled)(() => progress(clampedProgress)));
      }
    }
    function calculateBounds() {
      rect = get(container).getBoundingClientRect();
      pageTop = window.scrollY + rect.top;
      minTop = Math.min(pageTop, innerHeight * threshold()) + margin();
      maxTop = innerHeight - rect.height + margin();
      calculateProgress(rect);
    }
    intersectionObserver = new IntersectionObserver((entries) => {
      let lastEntry = entries.at(-1);
      intersectionRatio = lastEntry.intersectionRatio;
      if (lastEntry.isIntersecting) {
        calculateBounds();
        calculateProgress();
        window.addEventListener("scroll", calculateProgress);
        window.addEventListener("resize", calculateBounds);
        resizeObserver == null ? void 0 : resizeObserver.observe(get(container));
      } else {
        window.removeEventListener("scroll", calculateProgress);
        window.removeEventListener("resize", calculateBounds);
        resizeObserver == null ? void 0 : resizeObserver.unobserve(get(container));
      }
    });
    intersectionObserver.observe(get(container), {
      rootMargin: (margin() ?? 0) + "px",
      threshold: threshold()
    });
    resizeObserver = new ResizeObserver(calculateBounds);
    calculateBounds();
  });
  pre_effect(() => {
    deep_read_state(throttle());
    untrack(() => {
      let last = 0;
      set(throttled, throttle() > 0 ? function(fn) {
        return function() {
          let now = performance.now();
          if (now - last >= throttle()) {
            fn();
            last = now;
          }
        };
      } : identity);
    });
  });
  pre_effect(() => {
    deep_read_state(debounce());
    untrack(() => {
      let debouncerId;
      set(debounced, debounce() ? debounce() > 0 ? function(fn) {
        clearTimeout(debouncerId);
        debouncerId = setTimeout(fn, debounce());
      } : function(fn) {
        cancelAnimationFrame(debouncerId);
        debouncerId = requestAnimationFrame(fn);
      } : runImmediately);
    });
  });
  init();
  var section = open($$anchor, true, frag);
  bind_this(section, ($$value) => set(container, $$value), () => get(container));
  var section_1 = child(section);
  var node = child(section_1);
  var section_2 = sibling(sibling(section_1, true));
  bind_this(section_2, ($$value) => set(vizContainer, $$value), () => get(vizContainer));
  var node_1 = child(section_2);
  attr_effect(section, "style", () => `--scrolly-margin: ${stringify(margin())}`);
  slot(node, $$props.children, {}, null);
  slot(node_1, (_a = $$props.$$slots) == null ? void 0 : _a["viz"], {}, null);
  close($$anchor, section);
  append_styles($$anchor, "svelte-14jsymd", "\n.scrolly.svelte-14jsymd {\n	position: relative;\n	display: grid;\n	grid-template-columns: var(--scrolly-story-width, 1fr) var(--scrolly-viz-width, 1fr);\n	grid-auto-flow: row dense;\n	gap: var(--scrolly-gap, 4rem);\n}\n\n.viz.svelte-14jsymd,\n.story:where(.svelte-14jsymd) {\n	grid-row: 1;\n}\n\n.viz.svelte-14jsymd {\n	position: sticky;\n	top: max(var(--scrolly-margin, 0) * 1px, var(--scrolly-viz-top, 2em));\n	max-height: 100vh;\n}\n\n@container style(--scrolly-layout: viz-first) {\n	.scrolly.svelte-14jsymd {\n		grid-template-columns: var(--scrolly-viz-width, 1fr) var(--scrolly-story-width, 1fr);\n	}\n\n	.viz.svelte-14jsymd {\n		grid-column: 1;\n	}\n\n	.story.svelte-14jsymd {\n		grid-column: 2;\n	}\n}\n\n@container style(--scrolly-layout: overlap) {\n	.scrolly.svelte-14jsymd {\n		grid-template-columns: 1fr;\n	}\n\n	.viz.svelte-14jsymd,\n	.story:where(.svelte-14jsymd) {\n		grid-column: 1;\n	}\n}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Nyb2xseS5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBeUhNO0FBQ04sdUJBQVEsQ0FBQztBQUNULENBQUMsa0JBQWtCO0FBQ25CLENBQUMsYUFBYTtBQUNkLENBQUMsb0ZBQW9GO0FBQ3JGLENBQUMseUJBQXlCO0FBQzFCLENBQUMsNkJBQTZCO0FBQzlCOztBQUVBLG1CQUFJO0FBQ0osNkJBQU0sQ0FBQztBQUNQLENBQUMsV0FBVztBQUNaOztBQUVBLG1CQUFJLENBQUM7QUFDTCxDQUFDLGdCQUFnQjtBQUNqQixDQUFDLHFFQUFxRTtBQUN0RSxDQUFDLGlCQUFpQjtBQUNsQjs7QUFFQSw4Q0FBOEM7QUFDOUMsQ0FBQyx1QkFBUSxDQUFDO0FBQ1YsRUFBRSxvRkFBb0Y7QUFDdEYsRUFBQzs7QUFFRCxDQUFDLG1CQUFJLENBQUM7QUFDTixFQUFFLGNBQWM7QUFDaEIsRUFBQzs7QUFFRCxDQUFDLHFCQUFNLENBQUM7QUFDUixFQUFFLGNBQWM7QUFDaEIsRUFBQztBQUNEOztBQUVBLDRDQUE0QztBQUM1QyxDQUFDLHVCQUFRLENBQUM7QUFDVixFQUFFLDBCQUEwQjtBQUM1QixFQUFDOztBQUVELENBQUMsbUJBQUk7QUFDTCxDQUFDLDZCQUFNLENBQUM7QUFDUixFQUFFLGNBQWM7QUFDaEIsRUFBQztBQUNEIiwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJTY3JvbGx5LnN2ZWx0ZSJdfQ== */");
  return pop({
    $set: () => {
      throw new Error("The component shape you get when doing bind:this changed. Updating its properties via $set is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $on: () => {
      throw new Error("The component shape you get when doing bind:this changed. Listening to events via $on is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    },
    $destroy: () => {
      throw new Error("The component shape you get when doing bind:this changed. Destroying such a component via $destroy is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
    }
  });
}
Scrolly.filename = ".../node_modules/svelte-scrolly/Scrolly.svelte";
mark_module_end();
export {
  Scrolly as default
};
//# sourceMappingURL=svelte-scrolly.js.map
